resources:
  - name: windowsbaseami_params
    type: params
    version:
      params:
        SOURCE_AMI: "ami-07a29e78aeb420471"
        REGION: "us-east-1"

  - name: windowsbaseami_winrm_keys
    type: integration
    integration: winrm_creds

  - name: w2k16_dd_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "dry-dock/w16"
      branch: master

  - name: w2k16_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/w16"
      versionName: master

  - name: w2k16dotnetcore_dd_repo
    type: gitRepo
    integration: avinci_gh
    versionTemplate:
      sourceName: "dry-dock/w16dotnetcore"
      branch: master

  - name: w2k16dotnetcore_dd_img
    type: image
    integration: shipDH
    versionTemplate:
      sourceName: "drydock/w16dotnetcore"
      versionName: master


jobs:
  - name: w2k16_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: w2k16_cache
      container: false
    steps:
      - IN: w2k16_dd_repo
      - TASK:
          name: w2k16_build
          runtime:
            options:
              env:
                - REL_VER: "master"
                - IMG_OUT: "w2k16_dd_img"
                - RES_REPO: "w2k16_dd_repo"
          script:
            - $script:REPO_COMMIT=$(shipctl get_resource_version_key "$env:RES_REPO" "shaData.commitSha")
            - $script:IMG_NAME=$(shipctl get_resource_version_key "$env:IMG_OUT" "sourceName")
            - $script:DH_USR_NAME=$(shipctl get_integration_resource_field "$env:IMG_OUT" "userName")
            - $script:DH_PASS=$(shipctl get_integration_resource_field "$env:IMG_OUT" "password")
            - pushd $(shipctl get_resource_state "$env:RES_REPO")
            - docker build -t="${IMG_NAME}:${env:REL_VER}" --pull .
            - docker login -u "$DH_USR_NAME" -p "$DH_PASS"
            - docker push "${IMG_NAME}:${env:REL_VER}"
      - OUT: w2k16_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi "$env:JOB_NAME" "versionName=${env:REL_VER}" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi "$env:IMG_OUT" "versionName=${env:REL_VER}" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=${env:BUILD_NUMBER}"

  - name: w2k16dotnetcore_x8664_build
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: w2k16_cache
      container: false
    steps:
      - IN: w2k16dotnetcore_dd_repo
      - IN: w2k16_dd_img
      - TASK:
          name: w2k16dotnetcore_build
          runtime:
            options:
              env:
                - IMG_BASE: "w2k16_dd_img"
                - IMG_OUT: "w2k16dotnetcore_dd_img"
                - RES_REPO: "w2k16dotnetcore_dd_repo"
          script:
            - $script:REL_VER=$(shipctl get_resource_version_key "$env:IMG_BASE" "versionName")
            - $script:REPO_COMMIT=$(shipctl get_resource_version_key "$env:RES_REPO" "shaData.commitSha")
            - $script:IMG_NAME=$(shipctl get_resource_version_key "$env:IMG_OUT" "sourceName")
            - $script:DH_USR_NAME=$(shipctl get_integration_resource_field "$env:IMG_OUT" "userName")
            - $script:DH_PASS=$(shipctl get_integration_resource_field "$env:IMG_OUT" "password")
            - pushd $(shipctl get_resource_state "$env:RES_REPO")
            - docker build -t="${IMG_NAME}:${REL_VER}" --pull .
            - docker login -u "$DH_USR_NAME" -p "$DH_PASS"
            - docker push "${IMG_NAME}:${REL_VER}"
      - OUT: w2k16dotnetcore_dd_img
    on_success:
      script:
        - shipctl put_resource_state_multi "$env:JOB_NAME" "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
        - shipctl put_resource_state_multi "$env:IMG_OUT" "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=${env:BUILD_NUMBER}"


####
  - name: w2k16_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: w2k16_cache
      container: false
    steps:
      - IN: prod_release
      - IN: w2k16_dd_img
        switch: off
      - TASK:
          name: tag_img
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "w2k16_dd_img"
          script:
            - $script:REL_VER=$(shipctl get_resource_version_key "$env:RES_VER" "versionName")
            - |
               $script:REPO_COMMIT=$(shipctl get_resource_version_key "$env:RES_IMG" "IMG_REPO_COMMIT_SHA")
               $script:IMG_NAME=$(shipctl get_resource_version_key "$env:RES_IMG" "sourceName")
               $script:UP_IMG_TAG=$(shipctl get_resource_version_key "$env:RES_IMG" "versionName")
               $script:DH_USR_NAME=$(shipctl get_integration_resource_field "$env:RES_IMG" "userName")
               $script:DH_PASS=$(shipctl get_integration_resource_field "$env:RES_IMG" "password")
            - docker login -u "$DH_USR_NAME" -p "$DH_PASS"
            - docker pull "${IMG_NAME}:${UP_IMG_TAG}"
            - |
               docker tag "${IMG_NAME}:${UP_IMG_TAG}" "${IMG_NAME}:${REL_VER}"
               docker push "${IMG_NAME}:${REL_VER}"
            - |
               docker tag "${IMG_NAME}:${UP_IMG_TAG}" "${IMG_NAME}:latest"
               docker push "${IMG_NAME}:latest"
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=${REL_VER}" "TAG_COMMIT_SHA=${REPO_COMMIT}" "TAG_IMG=${REL_VER}"

  - name: w2k16_repo_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: drydock_release
      - IN: w2k16_dd_img
        switch: off
      - IN: w2k16_dd_repo
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: tag_repo
          runtime:
            options:
              env:
                - RES_VER: "drydock_release"
                - RES_IMG: "w2k16_dd_img"
                - RES_REPO: "w2k16_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/w16.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=${REL_VER}" "TAG_COMMIT_SHA=${REPO_COMMIT}" "TAG_IMG=${REL_VER}"

  - name: w2k16dotnetcore_x8664_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: w2k16_cache
      container: false
    steps:
      - IN: drydock_release
      - IN: w2k16dotnetcore_dd_img
        switch: off
      - TASK:
          name: tag_img
          runtime:
            options:
              env:
                - RES_VER: "drydock_release"
                - RES_IMG: "w2k16dotnetcore_dd_img"
          script:
            - $script:REL_VER=$(shipctl get_resource_version_key "$env:RES_VER" "versionName")
            - |
               $script:REPO_COMMIT=$(shipctl get_resource_version_key "$env:RES_IMG" "IMG_REPO_COMMIT_SHA")
               $script:IMG_NAME=$(shipctl get_resource_version_key "$env:RES_IMG" "sourceName")
               $script:UP_IMG_TAG=$(shipctl get_resource_version_key "$env:RES_IMG" "versionName")
               $script:DH_USR_NAME=$(shipctl get_integration_resource_field "$env:RES_IMG" "userName")
               $script:DH_PASS=$(shipctl get_integration_resource_field "$env:RES_IMG" "password")
            - docker login -u "$DH_USR_NAME" -p "$DH_PASS"
            - docker pull "${IMG_NAME}:${UP_IMG_TAG}"
            - |
               docker tag "${IMG_NAME}:${UP_IMG_TAG}" "${IMG_NAME}:${REL_VER}"
               docker push "${IMG_NAME}:${REL_VER}"
            - |
               docker tag "${IMG_NAME}:${UP_IMG_TAG}" "${IMG_NAME}:latest"
               docker push "${IMG_NAME}:latest"
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=${REL_VER}" "TAG_COMMIT_SHA=${REPO_COMMIT}" "TAG_IMG=${REL_VER}"

  - name: w2k16dotnetcore_repo_tag
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: prod_release
      - IN: w2k16dotnetcore_dd_img
        switch: off
      - IN: w2k16dotnetcore_dd_repo
        switch: off
      - IN: shipit_gh_ssh
        switch: off
      - TASK:
          name: tag_repo
          runtime:
            options:
              env:
                - RES_VER: "prod_release"
                - RES_IMG: "w2k16dotnetcore_dd_img"
                - RES_REPO: "w2k16dotnetcore_dd_repo"
                - GIT_PATH: "git@github.com:dry-dock/w16dotnetcore.git"
          script:
            - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
            - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
            - |
               pushd $(shipctl get_resource_meta "shipit_gh_ssh")
                 shipctl get_json_value integration.json 'privateKey' > gh_ssh.key
                 chmod 600 gh_ssh.key
                 ssh-add gh_ssh.key
               popd
            - pushd $(shipctl get_resource_state "$RES_REPO")
            - |
               git remote add up $GIT_PATH
               git remote -v
               git checkout master
            - |
               git pull --tags
               if git tag -d $REL_VER; then
                 git push --delete up $REL_VER
               fi
            - |
               git checkout $REPO_COMMIT
               git tag $REL_VER
               git push up $REL_VER
    on_success:
      script:
        - shipctl put_resource_state_multi $JOB_NAME "versionName=${REL_VER}" "TAG_COMMIT_SHA=${REPO_COMMIT}" "TAG_IMG=${REL_VER}"



### AWS
  - name: windowsbaseami_prep
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    steps:
      - IN: buildami_repo
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: w2k16_dd_img
      - IN: w2k16dotnetcore_dd_img
      - IN: w2k16reqProc_x8664_build
      - TASK:
          script:
            - pushd $(shipctl get_resource_state "buildami_repo")
            - cd windowsBase
            - sed -i "s/{{%WINRM_USERNAME%}}/$WINRM_USERNAME/g" ./bootstrap_win.txt
            - sed -i "s/{{%WINRM_PASSWORD%}}/$WINRM_PASSWORD/g" ./bootstrap_win.txt
            - ./basePack.sh windowsbaseami_prep ami_bits_access_cli
            - popd
    on_failure:
      - script: pushd $(shipctl get_resource_state "buildami_repo")
      - script: cd windowsBase
      - script: cat output.txt
      - script: popd

  - name: windowsbaseami_patch
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: cexec_file_pack
      - IN: node_file_pack
      - IN: w2k16reqProc_x8664_build
      - IN: ami_reqKick_repo
      - IN: windowsbaseami_prep
      - TASK:
          name: patch_w16_aws_image
          runtime:
            options:
              imageName: drydock/w16
              imageTag: v6.5.4
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsBasePatch"
            - $env:AWS_ACCESS_KEY_ID=$(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY=$(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID=$(shipctl get_resource_version_key windowsbaseami_prep versionName)
            - $env:RES_IMG_VER_NAME_DASH=$(shipctl get_resource_version_key windowsbaseami_prep RES_IMG_VER_NAME_DASH)
            # This is a workaround until shipctl replace on Windows is fixed in https://github.com/Shippable/heap/issues/2319
            - $env:RES_IMG_DASH_VER_NAME=$(shipctl get_resource_version_key windowsbaseami_prep RES_IMG_VER_NAME_DASH)
            - $env:RES_IMG_VER_NAME=$(shipctl get_resource_version_key windowsbaseami_prep RES_IMG_VER_NAME)
            - shipctl replace bootstrap_win.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" basePatchAMI.json
            - packer build -machine-readable -var-file="vars.json" basePatchAMI.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME" "IMAGE_NAME=$env:IMAGE_NAME" "RES_IMG_VER_NAME=$env:RES_IMG_VER_NAME" "RES_IMG_VER_NAME_DASH=$env:RES_IMG_VER_NAME_DASH"
        - shipctl copy_file_to_state images.txt
    on_failure:
      script:
        - cat output.txt

  - name: windowsfinalami_prep
    type: runSh
    triggerMode: parallel
    dependencyMode: strict
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: w2k16_x8664_tag
      - IN: w2k16dotnetcore_x8664_tag
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - IN: buildami_repo
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: windowsbaseami_patch
        switch: off
      - IN: prod_release
        switch: off
      - IN: drydock_release
        switch: off
      - TASK:
          runtime:
            options:
              imageName: drydock/w16
              imageTag: v6.12.4
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID=$(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY=$(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID=$env:SOURCE_AMI
            - $env:REL_VER=$(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER=($env:REL_VER).replace(".", "-")
            - $env:DRYDOCK_VER=$(shipctl get_resource_version_name drydock_release)
            - shipctl replace bootstrap_win_fresh.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_fresh.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_fresh.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - |
              if($REL_VER -eq $DRYDOCK_VER) {
                packer validate -var-file="vars.json" execAMIFresh.json
                packer build -machine-readable -var-file="vars.json" execAMIFresh.json 2>&1 | tee-object output.txt
                $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
              }else {
                Write-Host "SHIPPABLE_RELEASE not same as DRYDOCK_RELEASE, skipping Machine Image creation"
                #TODO: use shipctl copy_file_from_prev_state to source previous
                #state env's and export them so that previous job state is
                #persisted in case AMI creation is skipped
              }
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME" "RES_REL_VER_NAME=$env:REL_VER" "RES_REL_VER_NAME_DASH=$env:REL_DASH_VER"
    on_failure:
      script:
        - cat output.txt

  - name: v634_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v6.12.4
                env:
                  - UPDATE_AMI_ID: ami-e03d5c9f
                  - UPDATE_AMI_VERSION: v6.3.4
                  - AMI_TYPE: v634
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
    on_failure:
      - script: cat output.txt

  - name: v644_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v6.12.4
                env:
                  - UPDATE_AMI_ID: ami-27ddbb58
                  - UPDATE_AMI_VERSION: v6.4.4
                  - AMI_TYPE: v644
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt


  - name: v654_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v6.12.4
                env:
                  - UPDATE_AMI_ID: ami-0cd3af73
                  - UPDATE_AMI_VERSION: v6.5.4
                  - AMI_TYPE: v654
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt

  - name: v664_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v6.12.4
                env:
                  - UPDATE_AMI_ID: ami-002b037f
                  - UPDATE_AMI_VERSION: v6.6.4
                  - AMI_TYPE: v664
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt

  - name: v674_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v6.12.4
                env:
                  - UPDATE_AMI_ID: ami-7ebaa201
                  - UPDATE_AMI_VERSION: v6.7.4
                  - AMI_TYPE: v674
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt

  - name: v684_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v6.12.4
                env:
                  - UPDATE_AMI_ID: ami-066addeb51ad9eecc
                  - UPDATE_AMI_VERSION: v6.8.4
                  - AMI_TYPE: v684
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
        - shipctl put_resource_state_multi $env:JOB_NAME "updateAmiId=$env:UPDATE_AMI_ID"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt

  - name: v694_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v6.12.4
                env:
                  - UPDATE_AMI_ID: ami-083fef020e90770a4
                  - UPDATE_AMI_VERSION: v6.9.4
                  - AMI_TYPE: v694
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
        - shipctl put_resource_state_multi $env:JOB_NAME "updateAmiId=$env:UPDATE_AMI_ID"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt

  - name: v6104_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v6.12.4
                env:
                  - UPDATE_AMI_ID: ami-0e82d65e0b8bbe37c
                  - UPDATE_AMI_VERSION: v6.10.4
                  - AMI_TYPE: v6104
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
        - shipctl put_resource_state_multi $env:JOB_NAME "updateAmiId=$env:UPDATE_AMI_ID"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt

  - name: v6124_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v6.12.4
                env:
                  - UPDATE_AMI_ID: ami-0ef9a245c5a94cb33
                  - UPDATE_AMI_VERSION: v6.12.4
                  - AMI_TYPE: v6124
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
        - shipctl put_resource_state_multi $env:JOB_NAME "updateAmiId=$env:UPDATE_AMI_ID"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt

  - name: v714_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v7.1.4
                env:
                  - UPDATE_AMI_ID: ami-0d737ef2009813be0
                  - UPDATE_AMI_VERSION: v7.1.4
                  - AMI_TYPE: v714
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
        - shipctl put_resource_state_multi $env:JOB_NAME "updateAmiId=$env:UPDATE_AMI_ID"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt

  - name: v724_w2k16_aws
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    runtime:
      nodePool: w2k16_cache
    steps:
      - IN: buildami_repo
        switch: off
      - IN: windowsbaseami_params
        switch: off
      - IN: windowsbaseami_winrm_keys
        switch: off
      - IN: prod_release
        switch: off
      - IN: ami_bits_access_cli
        switch: off
      - IN: node_repo_file_tag
      - IN: reqKick_repo_file_tag
      - IN: w2k16reqProc_dd_tag
      - TASK:
          runtime:
              options:
                imageName: drydock/w16
                imageTag: v7.2.4
                env:
                  - UPDATE_AMI_ID: ami-0dec38e65426383e5
                  - UPDATE_AMI_VERSION: v7.2.4
                  - AMI_TYPE: v724
          script:
            - pushd "$(shipctl get_resource_state "buildami_repo")/windowsExec"
            - $env:AWS_ACCESS_KEY_ID = $(shipctl get_integration_resource_field ami_bits_access_cli "accessKey")
            - $env:AWS_SECRET_ACCESS_KEY = $(shipctl get_integration_resource_field ami_bits_access_cli "secretKey")
            - $env:AMI_ID = $env:UPDATE_AMI_ID
            - $env:REL_VER = $(shipctl get_resource_version_name prod_release)
            - $env:REL_DASH_VER = ($env:REL_VER).replace(".", "-")
            - shipctl replace bootstrap_win_update.txt vars.json
            - |
              $vars_content = Get-Content .\vars.json
              $vars_path = (Get-ChildItem .\vars.json).FullName
              [IO.File]::WriteAllLines($vars_path, $vars_content)
            - |
              $bootstrap_content = get-content .\bootstrap_win_update.txt
              $bootstrap_path = (Get-ChildItem .\bootstrap_win_update.txt).FullName
              [IO.File]::WriteAllLines($bootstrap_path, $bootstrap_content)
            - packer validate -var-file="vars.json" execAMIUpdate.json
            - packer build -machine-readable -var-file="vars.json" execAMIUpdate.json 2>&1 | tee-object output.txt
            - $env:IMAGE_NAME=$(Get-content .\output.txt | where-object { $_ -match "artifact,0,id" } | foreach-object { (($_ -split ",")[5] -split ':')[1] })
            - popd
    on_success:
      script:
        - shipctl put_resource_state_multi $env:JOB_NAME "versionName=$env:IMAGE_NAME"
        - shipctl put_resource_state_multi $env:JOB_NAME "updateAmiId=$env:UPDATE_AMI_ID"
    on_failure:
      - script: cat /build/IN/buildami_repo/gitRepo/windowsExec/output.txt
