setup_docker_img_temp: &setup_docker_img
  - |
      IMG_NAME=$(shipctl get_resource_version_key $RES_IMG "sourceName")
      IMG_TAG=$(shipctl get_resource_version_key "$RES_IMG" "versionName")
      DH_USR_NAME=$(shipctl get_integration_resource_field $RES_IMG "userName")
      DH_PASS=$(shipctl get_integration_resource_field $RES_IMG "password")
      docker login -u $DH_USR_NAME -p $DH_PASS

build_docker_img_temp: &build_docker_img
  - |
      pushd $(shipctl get_resource_state "$RES_REPO")
        sudo docker build -t=$IMG_NAME:$REL_VER --pull .
        sudo docker push $IMG_NAME:$REL_VER
      popd

setup_ssh_key_temp: &setup_ssh_key
  - |
      pushd integrations/ship_ssh
        chmod 600 ship_ssh_key
        ssh-add ship_ssh_key
        GIT_SOURCE=$(shipctl get_resource_version_key "$RES_REPO" "sourceName")
        pushd $(shipctl get_resource_state "$RES_REPO")
          git remote add up "git@github.com:"$GIT_SOURCE".git"
        popd
      popd

tag_docker_img_temp: &tag_docker_img
  - |
      docker pull "$IMG_NAME:$IMG_TAG"
      docker tag "$IMG_NAME:$IMG_TAG" "$IMG_NAME:$REL_VER"
      docker push "$IMG_NAME:$REL_VER"
      docker tag "$IMG_NAME:$IMG_TAG" "$IMG_NAME:latest"
      docker push "$IMG_NAME:latest"

get_git_tags_temp: &get_git_tags
  - |
      pushd $(shipctl get_resource_state "$RES_REPO")
        git checkout master
        git pull --tags
        if git tag -d $REL_VER; then
          git push --delete up $REL_VER
        fi
      popd

tag_git_repo_temp: &tag_git_repo
  - |
      pushd $(shipctl get_resource_state "$RES_REPO")
        git checkout master
        git checkout $REPO_COMMIT
        git tag $REL_VER
        git push up $REL_VER
      popd

build_ship_assets_temp: &build_ship_assets
  - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_REPO" "shaData.commitSha")
  - RES_IMG=$IMG_OUT
  - *setup_docker_img
  - *build_docker_img

tag_ship_assets_temp: &tag_ship_assets
  - REL_VER=$(shipctl get_resource_version_key "$RES_VER" "versionName")
  - REPO_COMMIT=$(shipctl get_resource_version_key "$RES_IMG" "IMG_REPO_COMMIT_SHA")
  - *setup_docker_img
  - *setup_ssh_key
  - *tag_docker_img
  - *get_git_tags
  - *tag_git_repo

build_ship_assets_on_success_temp: &build_ship_assets_on_success
  - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT"
  - shipctl put_resource_state_multi $IMG_OUT "versionName=$REL_VER" "IMG_REPO_COMMIT_SHA=$REPO_COMMIT" "BUILD_NUMBER=$BUILD_NUMBER"

tag_ship_assets_on_success_temp: &tag_ship_assets_on_success
  - shipctl put_resource_state_multi $JOB_NAME "versionName=$REL_VER" "TAG_COMMIT_SHA=$REPO_COMMIT" "TAG_IMG=$REL_VER"

final_task_setup_template: &final_task_setup_template
  - set -o pipefail
  - |
      export ARCHITECTURE=$(shipctl get_resource_version_key "$BASE_IMG_RES" "ARCHITECTURE")
      export OS=$(shipctl get_resource_version_key "$BASE_IMG_RES" "OS")
      export FAMILY_SUFFIX=$(shipctl get_resource_version_key "$BASE_IMG_RES" "FAMILY_SUFFIX")
  - |
      export REL_VER=$(shipctl get_resource_version_name "prod_release")
      export IMG_VER_DASH=${IMG_VER//./-}
      export FAM_NAME=$IMG_VER_DASH"-final-$FAMILY_SUFFIX"
      export SOURCE_IMAGE_FAMILY=$FAM_NAME
  - |
      REQPROC_REG=$(shipctl get_resource_version_key "$REQPROC_IMG_RES" "sourceName")
      REQPROC_TAG=$(shipctl get_resource_version_key "$REQPROC_RES" "versionName")
      export REQPROC_IMAGE="$REQPROC_REG:$REQPROC_TAG"
  - |
      NODE_TAR_FILENAME=$(shipctl get_resource_version_key "$NODE_RES" "TAR_FILENAME")
      NODE_WEB_URL=$(shipctl get_resource_version_key "$NODE_RES" "WEB_URL")
      export NODE_DOWNLOAD_URL="$NODE_WEB_URL/$REL_VER/$NODE_TAR_FILENAME"
  - |
      REP_TAR_FILENAME=$(shipctl get_resource_version_key "$REPORTS_RES" "TAR_FILENAME")
      REP_WEB_URL=$(shipctl get_resource_version_key "$REPORTS_RES" "WEB_URL")
      export REPORTS_DOWNLOAD_URL="$REP_WEB_URL/$REL_VER/$REP_TAR_FILENAME"
  - |
      KICK_TAR_FILENAME=$(shipctl get_resource_version_key "$REQKICK_RES" "TAR_FILENAME")
      KICK_WEB_URL=$(shipctl get_resource_version_key "$REQKICK_RES" "WEB_URL")
      export REQKICK_DOWNLOAD_URL="$KICK_WEB_URL/$REL_VER/$KICK_TAR_FILENAME"
  - |
      CEXEC_TAR_FILENAME=$(shipctl get_resource_version_key "$CEXEC_RES" "TAR_FILENAME")
      CEXEC_WEB_URL=$(shipctl get_resource_version_key "$CEXEC_RES" "WEB_URL")
      export CEXEC_DOWNLOAD_URL="$CEXEC_WEB_URL/$REL_VER/$CEXEC_TAR_FILENAME"

final_task_build_template: &final_task_build_template
  - |
      pushd $(shipctl get_resource_state "buildami_repo")/gcp/$ARCHITECTURE/$OS/final
      cp -R ../../../templates/linux/* .
      cp -R ../../../templates/final/* .
      shipctl copy_file_from_resource_state "$BASE_IMG_RES" "images.txt" .
      echo $(shipctl get_integration_resource_field ship_bits_gcp JSON_key) > $SERVICE_ACCOUNT_JSON
      shipctl replace vars.json
      packer validate -var-file=vars.json packer.json
      packer build -machine-readable -var-file=vars.json packer.json 2>&1 | tee output.txt
  - export IMAGE_NAME=$(cat output.txt | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d':' -f 2)

final_on_success_template: &final_on_success_template
  - shipctl put_resource_state_multi $JOB_NAME "versionName=$IMAGE_NAME" "IMAGE_NAME=$IMAGE_NAME" "IMAGE_FAM_NAME=$FAM_NAME" "REL_VER=$REL_VER" "IMG_VER=$IMG_VER" "SOURCE_IMAGE_FAMILY=$IMAGE_NAME"
  - shipctl put_resource_state_multi $JOB_NAME "ARCHITECTURE=$ARCHITECTURE" "OS=$OS" "DOCKER_VER=$DOCKER_VER" "REQPROC_REG=$REQPROC_REG" "FAMILY_SUFFIX=$FAMILY_SUFFIX"
  - shipctl put_resource_state_multi $JOB_NAME "REPORTS_TAR_FILENAME=$REP_TAR_FILENAME" "REPORTS_WEB_URL=$REP_WEB_URL" "REQKICK_TAR_FILENAME=$KICK_TAR_FILENAME" "REQKICK_WEB_URL=$KICK_WEB_URL"
  - shipctl put_resource_state_multi $JOB_NAME "CEXEC_TAR_FILENAME=$CEXEC_TAR_FILENAME" "CEXEC_WEB_URL=$CEXEC_WEB_URL" "NODE_TAR_FILENAME=$NODE_TAR_FILENAME" "NODE_WEB_URL=$NODE_WEB_URL"
  - shipctl copy_file_to_state images.txt

final_on_failure_template: &final_on_failure_template
  - cat output.txt


onetime_final_temp: &onetime_final
  # NOTE: SOURCE_IMAGE_FAMILY will be set to the previous version of this job. If this is the
  # first time the image is getting built, there will be no previous version, so uncomment
  # this line to override the behavior and build on top of patch image instead.
  - *final_task_setup_template
  - export SOURCE_IMAGE_FAMILY=$(shipctl get_resource_version_key "$BASE_IMG_RES" "IMAGE_FAM_NAME")
  - export DOCKER_VER=$(shipctl get_resource_version_key "$BASE_IMG_RES" "DOCKER_VER")
  - *final_task_build_template

regular_final_temp: &regular_final
  - *final_task_setup_template
  - *final_task_build_template
